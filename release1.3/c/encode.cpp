// version1.3
///////////////////////////////////////////////////////////////////
         //////                                    //////
///////////////////////////////////////////////////////////////////
///                                                             ///
/// This file is generated by Viterbi HDL Code Generator(VHCG)  ///
/// which is written by Mike Johnson at OpenCores.org  and      ///
/// distributed under GPL license.                              ///
///                                                             ///
/// If you have any advice,                                     ///
/// please email to jhonson.zhu@gmail.com                       ///
///                                                             ///
///////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////




// B=1, symbol_num=2, W=4, V=1, U=1
// para_polys=91 121
// Support Direct Traceback, Synchronous Ram


#include<iostream>
#include<math.h>
#define CONV_M 6
#define SYMBOL_BITS 2
using namespace std;

const int  patn_len=6;

int main()
{
  int pattern[patn_len]={1, 1, 1, 1, 1, 1};
  int patn_cnt=0;
  int mem;
  unsigned char m[CONV_M+1];
  unsigned char in;  //input 0 or 1
  unsigned char out=0;
  int flag=0;
  mem=0;  
  while(!cin.eof()&&cin>>in){
    if(!(in=='0' || in=='1')) continue;
    in-='0';
    int v_shift=0x01;
// for some things, the m[i] is newer than m[j], if i>j; because when I write the gen_poly function, I think bit is from high bits move to low bits and new bit commes into m from high bits. 
    m[CONV_M]=in;
    for(int i=0;i<CONV_M;i++,v_shift<<=1)
      {
        m[CONV_M-1-i]=(mem&v_shift)==0? 0 : 1;   
      }
    if(pattern[patn_cnt+0])
        cout<<(unsigned char)(m[6]^m[4]^m[3]^m[1]^m[0]+'0')<<' ';  // send x0
    if(pattern[patn_cnt+1])
        cout<<(unsigned char)(m[6]^m[5]^m[4]^m[3]^m[0]+'0')<<' ';  // send x1
    patn_cnt+=2;	
    patn_cnt%=patn_len;
     
    mem<<=1;   // input bits set to the low bits
    mem|=in;
  }
  return 0;
}
